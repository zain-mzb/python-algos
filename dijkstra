import itertools
from heapq import heappush, heappop

# Graph class to hold adjacency list
class Graph:
    def __init__(self, adjacency_list):
        self.adjacency_list = adjacency_list

# Vertex class to represent a node in the graph
class Vertex:
    def __init__(self, value):
        self.value = value

# Edge class to represent a connection from one vertex to another with a distance
class Edge:
    def __init__(self, distance, vertex):
        self.distance = distance
        self.vertex = vertex

# PriorityQueue to manage which node to process next based on smallest distance (min-heap)
class PriorityQueue:
    def __init__(self):
        self.pq = []                         # heap-ordered list of entries
        self.entry_finder = {}               # maps tasks (vertices) to their entries
        self.counter = itertools.count()     # unique counter to avoid comparison errors for equal priorities

    def __len__(self):
        return len(self.pq)

    def add_task(self, priority, task):
        'Add a new task or update the priority of an existing task'
        if task in self.entry_finder:
            self.update_priority(priority, task)
            return self
        count = next(self.counter)
        entry = [priority, count, task]
        self.entry_finder[task] = entry
        heappush(self.pq, entry)

    def update_priority(self, priority, task):
        'Update the priority of a task (used when we find a shorter path)'
        entry = self.entry_finder[task]
        count = next(self.counter)
        entry[0], entry[1] = priority, count

    def pop_task(self):
        'Remove and return the task with the lowest priority (shortest distance)'
        while self.pq:
            priority, count, task = heappop(self.pq)
            del self.entry_finder[task]
            return priority, task
        raise KeyError('pop from an empty priority queue')

# Dijkstra's algorithm implementation
def dijkstra(graph, start, end):
    # Track the shortest known path to each vertex
    previous = {v: None for v in graph.adjacency_list.keys()}
    # Track which vertices have been visited
    visited = {v: False for v in graph.adjacency_list.keys()}
    # Set all distances to infinity initially
    distances = {v: float("inf") for v in graph.adjacency_list.keys()}
    distances[start] = 0  # Distance to start vertex is 0
    queue = PriorityQueue()
    queue.add_task(0, start)  # Add start vertex to queue with priority 0
    path = []  # This will store the final path

    # MAIN LOOP
    while queue:
        removed_distance, removed = queue.pop_task()  # Get vertex with smallest distance
        visited[removed] = True  # Mark it as visited

        # If we reached the end vertex, reconstruct the path
        if removed is end:
            while previous[removed]:
                path.append(removed.value)
                removed = previous[removed]
            path.append(start.value)  # Add start at the end of path
            print(f"shortest distance to {end.value}: ", distances[end])
            print(f"path to {end.value}: ", path[::-1])  # Reverse to go from start to end
            return

        # Explore neighbors
        for edge in graph.adjacency_list[removed]:
            if visited[edge.vertex]:
                continue  # Skip visited nodes
            new_distance = removed_distance + edge.distance
            # If found a shorter path to neighbor, update
            if new_distance < distances[edge.vertex]:
                distances[edge.vertex] = new_distance
                previous[edge.vertex] = removed  # Store how we got here
                queue.add_task(new_distance, edge.vertex)

    return


# --- Setup graph for testing using Vertex A-H ---

# Create 8 vertices labeled A to H
vertices = [Vertex("A"), Vertex("B"), Vertex("C"), Vertex("D"), Vertex("E"), Vertex("F"), Vertex("G"), Vertex("H")]
A, B, C, D, E, F, G, H = vertices

# Create adjacency list representing the graph (undirected)
adj_list = {
    A: [Edge(1.8, B), Edge(1.5, C), Edge(1.4, D)],
    B: [Edge(1.8, A), Edge(1.6, E)],
    C: [Edge(1.5, A), Edge(1.8, E), Edge(2.1, F)],
    D: [Edge(1.4, A), Edge(2.7, F), Edge(2.4, G)],
    E: [Edge(1.6, B), Edge(1.8, C), Edge(1.4, F), Edge(1.6, H)],
    F: [Edge(2.1, C), Edge(2.7, D), Edge(1.4, E), Edge(1.3, G), Edge(1.2, H)],
    G: [Edge(2.4, D), Edge(1.3, F), Edge(1.5, H)],
    H: [Edge(1.6, E), Edge(1.2, F), Edge(1.5, G)],
}

# Create a Graph object
my_graph = Graph(adj_list)

# Run Dijkstra's algorithm from vertex A to vertex H
dijkstra(my_graph, start=A, end=H)
